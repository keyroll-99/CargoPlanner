// <auto-generated />
using System;
using CargoApp.Modules.Cargoes.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CargoApp.Modules.Cargoes.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(CargoDbContext))]
    [Migration("20231015153420_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cargoes")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("_deliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("_driverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("_expectedDeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("_fromId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("_receiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("_senderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("_toId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("_driverId");

                    b.HasIndex("_fromId");

                    b.HasIndex("_receiverId");

                    b.HasIndex("_senderId");

                    b.HasIndex("_toId");

                    b.ToTable("Cargoes", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Drivers", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OsmId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Locations", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Cargo", b =>
                {
                    b.HasOne("CargoApp.Modules.Cargoes.Core.CargoAggregate.Driver", "_driver")
                        .WithMany()
                        .HasForeignKey("_driverId");

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CargoAggregate.Location", "_from")
                        .WithMany()
                        .HasForeignKey("_fromId");

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CargoAggregate.Company", "_receiver")
                        .WithMany()
                        .HasForeignKey("_receiverId");

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CargoAggregate.Company", "_sender")
                        .WithMany()
                        .HasForeignKey("_senderId");

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CargoAggregate.Location", "_to")
                        .WithMany()
                        .HasForeignKey("_toId");

                    b.Navigation("_driver");

                    b.Navigation("_from");

                    b.Navigation("_receiver");

                    b.Navigation("_sender");

                    b.Navigation("_to");
                });
#pragma warning restore 612, 618
        }
    }
}
