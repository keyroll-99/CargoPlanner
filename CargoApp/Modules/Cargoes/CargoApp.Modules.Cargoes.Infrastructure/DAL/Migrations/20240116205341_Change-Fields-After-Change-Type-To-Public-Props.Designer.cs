// <auto-generated />
using System;
using CargoApp.Modules.Cargoes.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CargoApp.Modules.Cargoes.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(CargoDbContext))]
    [Migration("20240116205341_Change-Fields-After-Change-Type-To-Public-Props")]
    partial class ChangeFieldsAfterChangeTypeToPublicProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cargoes")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeliveryDate");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpectedDeliveryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpectedDeliveryTime");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("IsCanceled");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDelivered");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("IsLocked");

                    b.Property<Guid>("LocationFromId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LocationFromId");

                    b.HasIndex("LocationToId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Cargoes", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CompanyName");

                    b.HasKey("Id");

                    b.ToTable("Companies", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.DriverAggregate.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("EmployeeId");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HomeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("HomeId");

                    b.ToTable("Drivers", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.LocationAggregate.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OsmId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Locations", "cargoes");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CargoAggregate.Cargo", b =>
                {
                    b.HasOne("CargoApp.Modules.Cargoes.Core.DriverAggregate.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("CargoApp.Modules.Cargoes.Core.LocationAggregate.Location", "From")
                        .WithMany()
                        .HasForeignKey("LocationFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Modules.Cargoes.Core.LocationAggregate.Location", "To")
                        .WithMany()
                        .HasForeignKey("LocationToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CompanyAggregate.Company", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Modules.Cargoes.Core.CompanyAggregate.Company", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("From");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("To");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.DriverAggregate.Driver", b =>
                {
                    b.HasOne("CargoApp.Modules.Cargoes.Core.CompanyAggregate.Company", "Employer")
                        .WithMany("Drivers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargoApp.Modules.Cargoes.Core.LocationAggregate.Location", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId");

                    b.Navigation("Employer");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("CargoApp.Modules.Cargoes.Core.CompanyAggregate.Company", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
